import React, { useEffect, useRef, useState } from 'react';
import { Controller, useForm } from 'react-hook-form';
import AsyncSelect from 'react-select/async';
import AsyncSelectNew from 'react-select';
import { toast } from 'react-toastify';
import LoadingSpinner from '../../../loader/loader';

export default function PlanAssociation() {
    const scollToRef = useRef();
    const { register, handleSubmit, watch, reset, formState: { error } } = useForm();

    const [planList, setPlanList] = useState([]);
    const [planForm, setPlanForm] = useState(false);
    const [adding, setAdding] = useState(false);
    const [loading, setLoading] = useState(false);
    const [selectedClientGroupValue, setSelectedClientGroupValue] = useState('');
    const [selectedClientGroupLabel, setSelectedClientGroupLabel] = useState('');

    const [clientId, setClientId] = useState([]);
    const [clientData, setClientData] = useState([]);
    const [pharmacyChain, setPharmacyChain] = useState([]);
    const [pharmacyChainData, setPharmacyChainData] = useState([]);
    const [memProcFlag, setMemProcFlag] = useState([]);
    const [memProcFlagData, setMemProcFlagData] = useState([]);
    const [transactionType, setTransactionType] = useState([]);
    const [transactionTypeData, setTransactionTypeData] = useState([]);
    const [transactionAssociation, setTransactionAssociation] = useState([]);
    const [transactionAssociationData, setTransactionAssociationData] = useState([]);
    const [customer, setCustomer] = useState([]);
    const [customerData, setCustomerData] = useState([]);
    const [clientGroup, setClientGroup] = useState([]);
    const [clientGroupData, setClientGroupData] = useState([]);

    const clearForm = () => {
        setAdding(true);
        setPlanForm(false);
        reset();
    }

    const onSearch = (search) => {
        setLoading(true);
        const requestOptions = {
            method: 'GET',
            headers: { 'content-type': 'application/json' }
        }
        fetch(process.env.REACT_APP_API_BASEURL + `/api/plan-design/plan-association/get?search=${search.target.value}`, requestOptions)
            .then(async response => {
                const isJson = response.headers.get('content-type')?.includes('application/json');
                const data = isJson && await response.json();
                setPlanList(data.data);
                setLoading(false);
                //setSelectedClientGroupValue(data.data.client_group_id)
                console.log(data.data.client_group_id)
                toast.success(response.message, {
                    position: "top-right",
                    autoClose: 5000,
                    hideProgressBar: false,
                    closeOnClick: true,
                    pauseOnHover: true,
                    draggable: true,
                    progress: undefined,
                });
            })
            .catch(error => {
                console.error('There was an error!', error);
            });
    }

    const getFormData = (plan_data) => {
        setPlanForm(plan_data);
        scollToRef.current.scrollIntoView()

        const requestOptions = {
            method: 'GET',
            headers: { 'content-type': 'application/json' }
        }
        fetch(process.env.REACT_APP_API_BASEURL + `/api/plan-design/plan-association/get-client-group-label?search=${plan_data.client_group_id}`, requestOptions)
            .then(async response => {
                const isJson = response.headers.get('content-type')?.includes('application/json');
                const data = isJson && await response.json();
                setSelectedClientGroupLabel(data.data.group_name, "label");
                // setLoading(false);
            })

        //Pharmacy Chain
        fetch(process.env.REACT_APP_API_BASEURL + `/api/plan-design/plan-association/get-pharmacy-chain`)
            .then((res) => res.json())
            .then((pharmacyChain) => {
                const arraypharmacyChain = pharmacyChain.data.map((item) => ({
                    label: item.pharmacy_chain,
                    value: item.pharmacy_chain
                }));
                // setPharmacyChain(arraypharmacyChain);
                const pharmacy_chain_exists = arraypharmacyChain.some(v => (v.value == plan_data.pharmacy_chain));
                if (pharmacy_chain_exists) {
                    var pharmacy_chain_data = arraypharmacyChain.filter(item => item.value === plan_data.pharmacy_chain)
                    setPharmacyChainData(pharmacy_chain_data);
                }
            });

        //Membership Proc Flag
        fetch(process.env.REACT_APP_API_BASEURL + `/api/plan-design/plan-association/get-membership-process-flag`)
            .then((res) => res.json())
            .then((memProcFlag) => {
                const arrayformId = memProcFlag.data.map((item) => ({
                    label: item.label,
                    value: item.membership_processing_flag
                }));
                setMemProcFlag(arrayformId);
                const form_id_exists = arrayformId.some(v => (v.value == plan_data.membership_processing_flag));
                if (form_id_exists) {
                    var form_id_data = arrayformId.filter(item => item.value === plan_data.membership_processing_flag)
                    setMemProcFlagData(form_id_data);
                }
            });

        //Transaction Type
        fetch(process.env.REACT_APP_API_BASEURL + `/api/plan-design/plan-association/get-transaction-type`)
            .then((res) => res.json())
            .then((transactionType) => {
                const arraytransactionType = transactionType.data.map((item) => ({
                    label: item.trans_type_label,
                    value: item.trans_type_value
                }));
                const transaction_type_exists = arraytransactionType.some(v => (v.value == plan_data.transaction_type));
                if (transaction_type_exists) {
                    var data = arraytransactionType.filter(item => item.value === plan_data.transaction_type)
                    setTransactionTypeData(data);
                }
            });

        //Transaction Association
        fetch(process.env.REACT_APP_API_BASEURL + `/api/plan-design/plan-association/get-transaction-association`)
            .then((res) => res.json())
            .then((transactionAssociation) => {
                const arrayTransactionAssociation = transactionAssociation.data.map((item) => ({
                    label: item.trans_ass_label,
                    value: item.trans_ass_value
                }));
                const transaction_association_exists = arrayTransactionAssociation.some(v => (v.value == plan_data.use_default_ccg));
                if (transaction_association_exists) {
                    var data = arrayTransactionAssociation.filter(item => item.value === plan_data.use_default_ccg)
                    setTransactionAssociationData(data);
                }
            });

        //Customer 
        fetch(process.env.REACT_APP_API_BASEURL + `/api/plan-design/plan-association/get-customer`)
            .then((res) => res.json())
            .then((customer) => {
                const arrayCustomer = customer.data.map((item) => ({
                    label: item.customer_name,
                    value: item.customer_id
                }));
                const customer_exists = arrayCustomer.some(v => (v.value == plan_data.customer_id));
                if (customer_exists) {
                    var data = arrayCustomer.filter(item => item.value === plan_data.customer_id)
                    setCustomerData(data);
                }
            });

        //Client ID
        fetch(process.env.REACT_APP_API_BASEURL + `/api/plan-design/plan-association/get-client`)
            .then((res) => res.json())
            .then((clientId) => {
                const userClientId = clientId.data.map((item) => ({
                    label: item.client_name,
                    value: item.client_id
                }));
                const client_id_exists = userClientId.some(v => (v.value == plan_data.client_id));
                if (client_id_exists) {
                    var data = userClientId.filter(item => item.value === plan_data.client_id)
                    setClientData(data);
                }
            });

        //Client Group 
        fetch(process.env.REACT_APP_API_BASEURL + `/api/plan-design/plan-association/get-client-group`)
            .then((res) => res.json())
            .then((clientGroup) => {
                const arrayClientGroup = clientGroup.data.map((item) => ({
                    label: item.group_name,
                    value: item.client_group_id
                }));
                const client_group_exists = arrayClientGroup.some(v => (v.value == plan_data.client_group_id));
                if (client_group_exists) {
                    var data = arrayClientGroup.filter(item => item.value === plan_data.client_group_id)
                    setClientGroupData(data);
                }
            });
    }

    const loadPharmacyChailOptions = () => {
        fetch(process.env.REACT_APP_API_BASEURL + `/api/plan-design/plan-association/get-pharmacy-chain`)
            .then((res) => res.json())
            .then((pharmacyChain) => {
                const arraypharmacyChain = pharmacyChain.data.map((item) => ({
                    label: item.pharmacy_chain,
                    value: item.pharmacy_chain
                }));
                setPharmacyChain(arraypharmacyChain);
            });
    }

    // const loadFormIdOptions = (form_input) => {
    //     setFormId(form_input);
    // }

    const loadMemProcFlagOptions = () => {
        fetch(process.env.REACT_APP_API_BASEURL + `/api/plan-design/plan-association/get-membership-process-flag`)
            .then((res) => res.json())
            .then((memProcFlag) => {
                const arraymemProcFlag = memProcFlag.data.map((item) => ({
                    label: item.label,
                    value: item.membership_processing_flag
                }));
                setMemProcFlag(arraymemProcFlag);
            });
    }

    const loadCustomerOptions = () => {
        fetch(process.env.REACT_APP_API_BASEURL + `/api/plan-design/plan-association/get-customer`)
            .then((res) => res.json())
            .then((customer) => {
                const arrayCustomer = customer.data.map((item) => ({
                    label: item.customer_name,
                    value: item.customer_id
                }));
                setCustomer(arrayCustomer);
            });
    }

    const loadTransactionTypeOptions = () => {
        fetch(process.env.REACT_APP_API_BASEURL + `/api/plan-design/plan-association/get-transaction-type`)
            .then((res) => res.json())
            .then((transactionType) => {
                const arraytransactionType = transactionType.data.map((item) => ({
                    label: item.trans_type_label,
                    value: item.trans_type_value
                }));
                setTransactionType(arraytransactionType);
            });
    }

    const loadTransactionAssociationOptions = () => {
        fetch(process.env.REACT_APP_API_BASEURL + `/api/plan-design/plan-association/get-transaction-association`)
            .then((res) => res.json())
            .then((transactionAssociation) => {
                const arrayTransactionAssociation = transactionAssociation.data.map((item) => ({
                    label: item.trans_ass_label,
                    value: item.trans_ass_value
                }));
                setTransactionAssociation(arrayTransactionAssociation);
            });
    }


    const loadClientOptionsfetch = () => {
        fetch(process.env.REACT_APP_API_BASEURL + `/api/plan-design/plan-association/get-client`)
            .then((res) => res.json())
            .then((clientId) => {
                const userClientId = clientId.data.map((item) => ({
                    label: item.client_name,
                    value: item.client_id
                }));
                setClientId(userClientId);
            });
    }

    const loadClientGroupOptions = () => {
        fetch(process.env.REACT_APP_API_BASEURL + `/api/plan-design/plan-association/get-client-group`)
            .then((res) => res.json())
            .then((clientGroup) => {
                const arrayClientGroup = clientGroup.data.map((item) => ({
                    label: item.group_name,
                    value: item.client_group_id
                }));
                setClientGroup(arrayClientGroup);
            });

    }

    useEffect(() => {
        loadPharmacyChailOptions();
        // loadFormIdOptions();
        loadMemProcFlagOptions();
        loadCustomerOptions();
        loadTransactionTypeOptions();
        loadTransactionAssociationOptions();
        loadClientOptionsfetch();
        loadClientGroupOptions();
    }, [planList, planForm, adding]);
    return (
        <>
            <div className="row">
                <div className="col-md-6 mb-3">
                    <div className="breadcrum">
                        <ul>
                            <li><a href="">Home</a></li>
                            <li><i className="fas fa-angle-right"></i></li>
                            <li><a href="">Plan Design</a></li>
                            <li><i className="fas fa-angle-right"></i></li>
                            <li><a href="">Plan Association</a></li>
                        </ul>
                    </div>
                </div>
                <div className="col-md-6 mb-3">
                    <div className="breadcrum ">
                        <ul>
                            <li className="float-end m-0"><a href="">Page Hint <i className="fa-solid fa-lightbulb"></i></a></li>
                        </ul>
                    </div>
                </div>
            </div>
            <SearchPlanAssociation onSearch={onSearch} />
            <PlanAssociationList planList={planList} getFormData={getFormData} planForm={planForm} loading={loading} />
            <div ref={scollToRef}>
                <PlanAssociationForm planForm={planForm} clearForm={clearForm} selectedClientGroupLabel={selectedClientGroupLabel}
                    clientId={clientId} clientData={clientData} pharmacyChain={pharmacyChain} pharmacyChainData={pharmacyChainData} memProcFlag={memProcFlag} memProcFlagData={memProcFlagData}
                    transactionType={transactionType} transactionTypeData={transactionTypeData} transactionAssociation={transactionAssociation}
                    transactionAssociationData={transactionAssociationData} customer={customer} customerData={customerData} clientGroup={clientGroup} clientGroupData={clientGroupData}
                    setPharmacyChainData={setPharmacyChainData} setMemProcFlagData={setMemProcFlagData} setTransactionTypedata={setTransactionTypeData}
                    setTransactionAssociationData={setTransactionAssociationData} setCustomerData={setCustomerData} setClientData={setClientData}
                    setClientGroupData={setClientGroupData} />
            </div>
        </>
    )
}

function SearchPlanAssociation(props) {
    return (
        <>
            <div className="card mt-3 mb-3">
                <div className="card-body">
                    <div className="row mb-2">
                        <div className="col-md-12 mb-3">
                            <div className="form-group">
                                <small>Plan Association </small>
                                <input type="text" onKeyUp={e => props.onSearch(e)} className="form-control" placeholder='Start typing bin number/ process control number/ group/ plan ID to search'
                                />
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </>
    )
}

function PlanAssociationList(props) {
    const listArray = [];
    for (let i = 0; i < props.planList.length; i++) {
        listArray.push(<PlanRow planRow={props.planList[i]} getFormData={props.getFormData} planForm={props.planForm} />);
    }
    return (
        <>
            <div className="card mt-3 mb-3">
                <div className="card-body">
                    <div className="row">
                        <div className="col-md-8 mb-2">
                            <h5>Plan Association List</h5>
                        </div>
                        {/* <div className="col-md-4 mb-3 text-end"> */}
                        {/* <button className="btn btn-sm btn-warning" id="show" onClick={e => handleShow()}><i className="fa plus-circle"></i> Add NDC List</button> */}
                        {/* </div> */}

                        <div className="col-md-12">
                            <div className="card mt-3 mb-3">
                                <div className="card-body">
                                    <div style={{ height: '400px', overflowY: 'scroll' }}>
                                        <table className="table table-striped table-bordered" style={{ position: 'relative' }}>
                                            <thead className='stickt-thead'>
                                                <tr>
                                                    <th>Bin No.</th>
                                                    <th>Process Control No.</th>
                                                    <th>Group</th>
                                                    <th>Plan ID</th>
                                                    <th>Bin Suffix</th>
                                                </tr>
                                            </thead>
                                            <tbody>
                                                {props.loading ? <LoadingSpinner /> : listArray}
                                            </tbody>
                                        </table>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </>
    )
}

function PlanRow(props) {
    return (
        <>
            <tr onClick={e => props.getFormData(props.planRow)}
                className={props.planForm && props.planRow.bin_number == props.planForm.bin_number ? 'tblactiverow' : ''}>
                <td>{props.planRow.bin_number}</td>
                <td>{props.planRow.process_control_number}</td>
                <td>{props.planRow.group_number}</td>
                <td>{props.planRow.plan_id}</td>
                <td>{props.planRow.pin_number_suffix}</td>
            </tr>
        </>
    )
}

function PlanAssociationForm(props) {
    const { register, handleSubmit, watch, reset, control, formState: { errors } } = useForm();
    const [pharmacyChainInput, setPharmacyChainInput] = useState('');
    const [formId, setFormId] = useState('');
    // const [memProcFlag, setMemProcFlag] = useState('');
    // const [customer, setCustomer] = useState('');
    const [client, setClient] = useState('');
    // const [clientGroup, setClientGroup] = useState('');
    // const [transactionType, setTransactionType] = useState('');
    // const [transactionAssociation, setTransactionAssociation] = useState('');
    const [memProcFlagSelected, setMemProcFlagSelected] = useState('');
    const [mobile, setmobile] = useState('');
    const [isError, setIsError] = useState(false);
    // const [pinSuffixValue, setPinSuffixValue] = useState('');
    const [submitDisable, setSubmitDisable] = useState(false);
    const [selectedClientGroupValue, setSelectedClientGroupValue] = useState('');
    const [selectedClientGroupLabel, setSelectedClientGroupLabel] = useState('');
    const [isClientGroupChanged, setIsClientGroupChanged] = useState(false);

    // const [clientId, setClientId] = useState([]);
    // const [clientData, setClientData] = useState([]);
    // const [pharmacyChain, setPharmacyChain] = useState([]);
    // const [pharmacyChainData, setPharmacyChainData] = useState([]);
    // const [memProcFlag, setMemProcFlag] = useState([]);
    // const [memProcFlagData, setMemProcFlagData] = useState([]);
    // const [transactionType, setTransactionType] = useState([]);
    // const [transactionTypeData, setTransactionTypeData] = useState([]);
    // const [transactionAssociation, setTransactionAssociation] = useState([]);
    // const [transactionAssociationData, setTransactionAssociationData] = useState([]);
    // const [customer, setCustomer] = useState([]);
    // const [customerData, setCustomerData] = useState([]);
    // const [clientGroup, setClientGroup] = useState([]);
    // const [clientGroupData, setClientGroupData] = useState([]);

    const checkLengh = (suffix) => {
        if (suffix.target.value.length > 4) {
            setIsError(true);
            setSubmitDisable(true);
        } else {
            setIsError(false);
            setSubmitDisable(false);
        }
    }

    // const loadPharmacyChailOptions = () => {
    //     fetch(process.env.REACT_APP_API_BASEURL + `/api/plan-design/plan-association/get-pharmacy-chain`)
    //         .then((res) => res.json())
    //         .then((pharmacyChain) => {
    //             const arraypharmacyChain = pharmacyChain.data.map((item) => ({
    //                 label: item.pharmacy_chain,
    //                 value: item.pharmacy_chain
    //             }));
    //             setPharmacyChain(arraypharmacyChain);
    //         });
    // }

    // const loadFormIdOptions = (form_input) => {
    //     setFormId(form_input);
    // }

    // const loadMemProcFlagOptions = () => {
    //     fetch(process.env.REACT_APP_API_BASEURL + `/api/plan-design/plan-association/get-membership-process-flag`)
    //         .then((res) => res.json())
    //         .then((memProcFlag) => {
    //             const arraymemProcFlag = memProcFlag.data.map((item) => ({
    //                 label: item.label,
    //                 value: item.membership_processing_flag
    //             }));
    //             setMemProcFlag(arraymemProcFlag);
    //         });
    // }

   const submitPlanAssociation = (planAssociationData) => {
    // const submitHandler = (planAssociationData) => {
        console.log(planAssociationData.target.client_id.value);

        // const requestOptions = {
        //     method: 'POST',
        //     headers: { 'content-type': 'application/json' },
        //     body: JSON.stringify(planAssociationData)
        // }

        // fetch(process.env.REACT_APP_API_BASEURL + `/api/plan-design/plan-association/submit-form`, requestOptions)
        //     .then(async response => {
        //         const isJson = response.headers.get('content-type')?.includes('application/json');
        //         const data = isJson && await response.json();
        //         if (!response.ok) {
        //             // get error message from body or default to response status
        //             const error = (data && data.message) || response.status;
        //             return Promise.reject(error);
        //         } else {
        //             toast.success(data.message, {
        //                 position: "top-right",
        //                 autoClose: 5000,
        //                 hideProgressBar: false,
        //                 closeOnClick: true,
        //                 pauseOnHover: true,
        //                 draggable: true,
        //                 progress: undefined,
        //             });
        //         }

        //     })

        // planAssociationData.preventDefault();
        // console.log(planAssociationData.target.client_id.value)


        // const client_id = planAssociationData.target.client_id.value;
        // const customer_id = planAssociationData.target.customer_id.value;
        // const client_group_id = planAssociationData.target.client_group_id.value;
        // const plan_id = planAssociationData.target.plan_id.value;
        // const add_new = '1';
        // const data = { client_id, customer_id, client_group_id, plan_id, add_new };
        // console.log(data);
        // // axios.post("http://localhost:8000/api/plan-design/plan-association/submit-form", data)
        // fetch(process.env.REACT_APP_API_BASEURL + `/api/plan-design/plan-association/submit-form`, data)
        //     .then((response) => {
        //         console.log(response);
        //         // planAssociationData.target.reset();
        //     })
        //     .catch(error => {
        //         console.log(error)
        //     })
    }

    // const loadCustomerOptions = () => {
    //     fetch(process.env.REACT_APP_API_BASEURL + `/api/plan-design/plan-association/get-customer`)
    //         .then((res) => res.json())
    //         .then((customer) => {
    //             const arrayCustomer = customer.data.map((item) => ({
    //                 label: item.customer_name,
    //                 value: item.customer_id
    //             }));
    //             setCustomer(arrayCustomer);
    //         });
    // }

    // const loadTransactionTypeOptions = () => {
    //     fetch(process.env.REACT_APP_API_BASEURL + `/api/plan-design/plan-association/get-transaction-type`)
    //         .then((res) => res.json())
    //         .then((transactionType) => {
    //             const arraytransactionType = transactionType.data.map((item) => ({
    //                 label: item.trans_type_label,
    //                 value: item.trans_type_value
    //             }));
    //             setTransactionType(arraytransactionType);
    //         });
    // }

    // const loadTransactionAssociationOptions = () => {
    //     fetch(process.env.REACT_APP_API_BASEURL + `/api/plan-design/plan-association/get-transaction-association`)
    //         .then((res) => res.json())
    //         .then((transactionAssociation) => {
    //             const arrayTransactionAssociation = transactionAssociation.data.map((item) => ({
    //                 label: item.trans_ass_label,
    //                 value: item.trans_ass_value
    //             }));
    //             setTransactionAssociation(arrayTransactionAssociation);
    //         });
    // }


    // const loadClientOptionsfetch = () => {
    //     fetch(process.env.REACT_APP_API_BASEURL + `/api/plan-design/plan-association/get-client`)
    //         .then((res) => res.json())
    //         .then((clientId) => {
    //             const userClientId = clientId.data.map((item) => ({
    //                 label: item.client_name,
    //                 value: item.client_id
    //             }));
    //             setClientId(userClientId);
    //         });
    // }

    // const loadClientGroupOptions = () => {
    //     fetch(process.env.REACT_APP_API_BASEURL + `/api/plan-design/plan-association/get-client-group`)
    //         .then((res) => res.json())
    //         .then((clientGroup) => {
    //             const arrayClientGroup = clientGroup.data.map((item) => ({
    //                 label: item.group_name,
    //                 value: item.client_group_id
    //             }));
    //             setClientGroup(arrayClientGroup);
    //         });

    // }


    useEffect(() => {
        // if (props.planForm) {
        //     //Pharmacy Chain
        //     fetch(process.env.REACT_APP_API_BASEURL + `/api/plan-design/plan-association/get-pharmacy-chain`)
        //         .then((res) => res.json())
        //         .then((pharmacyChain) => {
        //             const arraypharmacyChain = pharmacyChain.data.map((item) => ({
        //                 label: item.pharmacy_chain,
        //                 value: item.pharmacy_chain
        //             }));
        //             // setPharmacyChain(arraypharmacyChain);
        //             const pharmacy_chain_exists = arraypharmacyChain.some(v => (v.value == props.planForm.pharmacy_chain));
        //             if (pharmacy_chain_exists) {
        //                 var pharmacy_chain_data = arraypharmacyChain.filter(item => item.value === props.planForm.pharmacy_chain)
        //                 setPharmacyChainData(pharmacy_chain_data);
        //             }
        //         });

        //     //Membership Proc Flag
        //     fetch(process.env.REACT_APP_API_BASEURL + `/api/plan-design/plan-association/get-membership-process-flag`)
        //         .then((res) => res.json())
        //         .then((memProcFlag) => {
        //             const arrayformId = memProcFlag.data.map((item) => ({
        //                 label: item.label,
        //                 value: item.membership_processing_flag
        //             }));
        //             setMemProcFlag(arrayformId);
        //             const form_id_exists = arrayformId.some(v => (v.value == props.planForm.membership_processing_flag));
        //             if (form_id_exists) {
        //                 var form_id_data = arrayformId.filter(item => item.value === props.planForm.membership_processing_flag)
        //                 setMemProcFlagData(form_id_data);
        //             }
        //         });

        //     //Transaction Type
        //     fetch(process.env.REACT_APP_API_BASEURL + `/api/plan-design/plan-association/get-transaction-type`)
        //         .then((res) => res.json())
        //         .then((transactionType) => {
        //             const arraytransactionType = transactionType.data.map((item) => ({
        //                 label: item.trans_type_label,
        //                 value: item.trans_type_value
        //             }));
        //             const transaction_type_exists = arraytransactionType.some(v => (v.value == props.planForm.transaction_type));
        //             if (transaction_type_exists) {
        //                 var data = arraytransactionType.filter(item => item.value === props.planForm.transaction_type)
        //                 setTransactionTypeData(data);
        //             }
        //         });

        //     //Transaction Association
        //     fetch(process.env.REACT_APP_API_BASEURL + `/api/plan-design/plan-association/get-transaction-association`)
        //         .then((res) => res.json())
        //         .then((transactionAssociation) => {
        //             const arrayTransactionAssociation = transactionAssociation.data.map((item) => ({
        //                 label: item.trans_ass_label,
        //                 value: item.trans_ass_value
        //             }));
        //             const transaction_association_exists = arrayTransactionAssociation.some(v => (v.value == props.planForm.use_default_ccg));
        //             if (transaction_association_exists) {
        //                 var data = arrayTransactionAssociation.filter(item => item.value === props.planForm.use_default_ccg)
        //                 setTransactionAssociationData(data);
        //             }
        //         });

        //     //Customer 
        //     fetch(process.env.REACT_APP_API_BASEURL + `/api/plan-design/plan-association/get-customer`)
        //         .then((res) => res.json())
        //         .then((customer) => {
        //             const arrayCustomer = customer.data.map((item) => ({
        //                 label: item.customer_name,
        //                 value: item.customer_id
        //             }));
        //             const customer_exists = arrayCustomer.some(v => (v.value == props.planForm.customer_id));
        //             if (customer_exists) {
        //                 var data = arrayCustomer.filter(item => item.value === props.planForm.customer_id)
        //                 setCustomerData(data);
        //             }
        //         });

        //     //Client ID
        //     fetch(process.env.REACT_APP_API_BASEURL + `/api/plan-design/plan-association/get-client`)
        //         .then((res) => res.json())
        //         .then((clientId) => {
        //             const userClientId = clientId.data.map((item) => ({
        //                 label: item.client_name,
        //                 value: item.client_id
        //             }));
        //             const client_id_exists = userClientId.some(v => (v.value == props.planForm.client_id));
        //             if (client_id_exists) {
        //                 var data = userClientId.filter(item => item.value === props.planForm.client_id)
        //                 setClientData(data);
        //             }
        //         });

        //     //Client Group 
        //     fetch(process.env.REACT_APP_API_BASEURL + `/api/plan-design/plan-association/get-client-group`)
        //         .then((res) => res.json())
        //         .then((clientGroup) => {
        //             const arrayClientGroup = clientGroup.data.map((item) => ({
        //                 label: item.group_name,
        //                 value: item.client_group_id
        //             }));
        //             const client_group_exists = arrayClientGroup.some(v => (v.value == props.planForm.client_group_id));
        //             if (client_group_exists) {
        //                 var data = arrayClientGroup.filter(item => item.value === props.planForm.client_group_id)
        //                 setClientGroupData(data);
        //             }
        //         });
        // }

        if (!props.adding) {
            reset({
                bin_number: '', process_control_number: '', group_number: '', pharmacy_chain: '', plan_id: '', form_id: '',
                membership_processing_flag: '', pin_number_suffix: '', transaction_type: '', customer_id: '', client_id: '',
                client_group_id: '', new: 1
            },
                { keepValues: false });

        } else {

        }
        reset(props.planForm)
    }, [props.planForm,
    ]);

    // useEffect(() => {
    //     props.loadClientOptionsfetch();
    //     props.loadPharmacyChailOptions();
    //     props.loadMemProcFlagOptions();
    //     props.loadTransactionTypeOptions();
    //     props.loadTransactionAssociationOptions();
    //     props.loadCustomerOptions();
    //     props.loadClientGroupOptions();
    // }, []);

    return (
        <>
            <form onSubmit={handleSubmit(submitPlanAssociation)}>
            {/* <form onSubmit={submitHandler}> */}
                <div className="card mt-3 mb-3">
                    <div className="card-body">
                        <div className="row">
                            <div className="modal-header">
                                <h5 className="modal-title" id="exampleModalLabel">{props.adding ? "Add" : "Update"} Plan Association</h5>
                                <button type="button" className="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                            </div>
                            <div className="modal-body">
                                <div className="row">
                                    <div className="col-md-3 mb-2">
                                        <div className="form-group">
                                            <small>Bin Number</small>
                                            <input type="text" className="form-control" {...register("bin_number", { required: true })}
                                                disabled={props.planForm ? true : false} />
                                            {errors.bin_number && <span><p className='notvalid'>This field is required!</p></span>}
                                        </div>
                                    </div>
                                    <div className="col-md-3 mb-2">
                                        <div className="form-group">
                                            <small>Process Control Number</small>
                                            <input type="text" className="form-control" {...register("process_control_number", { required: true })}
                                                disabled={props.planForm ? true : false} />
                                            {errors.process_control_number && <span><p className='notvalid'>This field is required!</p></span>}
                                        </div>
                                    </div>
                                    <div className="col-md-3 mb-2">
                                        <div className="form-group">
                                            <small>Group Number</small>
                                            <input type="text" className="form-control" {...register("group_number", { required: true })}
                                                disabled={props.planForm ? true : false} />
                                            {errors.group_number && <span><p className='notvalid'>This field is required!</p></span>}
                                        </div>
                                    </div>

                                    <div className="col-md-3 mb-2">
                                        <div className="form-group">
                                            <small>Pharmacy Chain</small>
                                            <AsyncSelectNew
                                                placeholder="Select Pharmacy Chain"
                                                options={props.pharmacyChain}
                                                name="pharmacy_chain"
                                                value={props.pharmacyChainData}
                                                onChange={(e) => props.setPharmacyChainData(e)}
                                            />
                                        </div>
                                    </div>

                                    <div className="col-md-3 mb-2">
                                        <div className="form-group">
                                            <small>Plan ID</small>
                                            <input type="text" className="form-control" {...register("plan_id")} />
                                            <a href=""><span className="fa fa-search form-icon"></span></a>
                                        </div>
                                    </div>
                                    <div className="col-md-3 mb-2">
                                        <div className="form-group">
                                            <small>Mail Plan Server ID</small>
                                            <AsyncSelectNew
                                                placeholder="Select Mail Plan Server ID"
                                                // options={formId}
                                                name="form_id"
                                            // value={formIdData}
                                            // onChange={(e) => setFormId(e)}
                                            />
                                        </div>
                                    </div>
                                    <div className="col-md-3 mb-2">
                                        <div className="form-group">
                                            <small className="required">Membership Proc Flag</small>
                                            <AsyncSelectNew
                                                placeholder="Select Membership Proc Flag"
                                                options={props.memProcFlag}
                                                name="membership_processing_flag"
                                                value={props.memProcFlagData}
                                                onChange={(e) => props.setMemProcFlagData(e)}
                                            />
                                        </div>
                                    </div>
                                    <div className="col-md-3 mb-2">
                                        <div className="form-group">
                                            <small>Pin Suffix</small>
                                            <input type="text" className="form-control" {...register("pin_number_suffix")}
                                                onKeyUp={e => checkLengh(e)}
                                            />
                                            {isError ? <span><p className='notvalid'>Limit is 4 !</p></span> : ""}
                                        </div>
                                    </div>
                                    <div className="col-md-3 mb-2">
                                        <div className="form-group">
                                            <small className="required">Transaction Type</small>
                                            <AsyncSelectNew
                                                placeholder="Select Transaction Type"
                                                options={props.transactionType}
                                                name="transaction_type"
                                                value={props.transactionTypeData}
                                                onChange={(e) => props.setTransactionTypedata(e)}
                                            />
                                        </div>
                                    </div>
                                    <div className="col-md-3 mb-2">
                                        <div className="form-group">
                                            <small className="required">Transaction Association</small>
                                            <AsyncSelectNew
                                                placeholder="Select Transaction Association"
                                                options={props.transactionAssociation}
                                                //name="use_default_ccg"
                                                name="transaction_association"
                                                value={props.transactionAssociationData}
                                                onChange={(e) => props.setTransactionAssociationData(e)}
                                            />
                                            {errors.use_default_ccg && <span><p className='notvalid'>This field is required!</p></span>}
                                        </div>
                                    </div>

                                    <div className="col-md-3 mb-2">
                                        <div className="form-group">
                                            <small>Customer</small>
                                            <AsyncSelectNew
                                                placeholder="Select Customer ID"
                                                options={props.customer}
                                                name="customer_id"
                                                value={props.customerData}
                                                onChange={(e) => props.setCustomerData(e)}
                                            />
                                        </div>
                                    </div>

                                    <div className="col-md-3 mb-2">
                                        <div className="form-group">
                                            <small>Client</small>
                                            <AsyncSelectNew
                                                placeholder="Select Client ID"
                                                options={props.clientId}
                                                name="client_id"
                                                value={props.clientData}
                                                onChange={(e) => props.setClientData(e)}
                                            />
                                        </div>
                                    </div>
                                    <div className="col-md-3 mb-2">
                                        <div className="form-group">
                                            <small>Group</small>
                                            {/* <Controller name="client_group_id"
                                                control={control}
                                                render={({ field }) => (
                                                    <AsyncSelect
                                                        {...field}
                                                        cacheOptions
                                                        defaultOptions
                                                        // value={selectedClientGroup}
                                                        //value={{ client_group_label: props.planForm.client_group_id, client_group_value: props.planForm.client_group_id }}
                                                        value={{ client_group_label: props.selectedClientGroupLabel, client_group_value: selectedClientGroupValue }}
                                                        getOptionLabel={e => e.client_group_label}
                                                        getOptionValue={e => e.client_group_value}
                                                        loadOptions={loadClientGroupOptions}
                                                        onInputChange={handleClientGroupInput}
                                                        onChange={handleClientGroupChange}
                                                        search={true}
                                                        placeholder="Select Client Group"
                                                    />
                                                )} /> */}

                                            <AsyncSelectNew
                                                placeholder="Select Client Group"
                                                options={props.clientGroup}
                                                name="client_group_id"
                                                value={props.clientGroupData}
                                                onChange={(e) => props.setClientGroupData(e)}
                                            />
                                        </div>
                                    </div>

                                </div>
                            </div>
                            <div className="modal-footer">
                                <button type="button" onClick={props.clearForm} className="btn btn-secondary" data-bs-dismiss="modal">Clear</button>
                                <button type="submit" className="btn btn-info" disabled={submitDisable ? true : false}>{props.planForm ? "Update" : "Add"} </button>
                            </div>
                        </div>
                    </div>
                </div>
            </form>
        </>
    )
}